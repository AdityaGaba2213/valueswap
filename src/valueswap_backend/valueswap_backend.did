<<<<<<< HEAD
=======
type CanisterIdRecord = record { canister_id : principal };
type CanisterSettings = record {
  freezing_threshold : opt nat;
  controllers : opt vec principal;
  reserved_cycles_limit : opt nat;
  memory_allocation : opt nat;
  compute_allocation : opt nat;
};
type CreateCanisterArgument = record { settings : opt CanisterSettings };
type CreatePoolParams = record {
  weight : float64;
  balance : nat64;
  value : nat64;
  token_name : text;
};
type PoolShare = record {
  token_weights : vec float64;
  token_value : vec float64;
  token_balances : vec float64;
  token_names : vec text;
};
type Pool_Data = record {
  pool_data : vec CreatePoolParams;
  swap_fee : float64;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant {
  Ok : record { CanisterIdRecord };
  Err : record { RejectionCode; text };
};
type Result_2 = variant { Ok; Err : text };
type Result_3 = variant { Ok : nat; Err : text };
service : () -> {
  create : () -> (Result);
  create_canister : (CreateCanisterArgument) -> (Result_1);
  create_pools : (Pool_Data) -> (Result_2);
  deposit_ckbtc : (nat64) -> (Result_3);
  get_constant_product_value : () -> (float64) query;
  get_lp_tokens : (text) -> (opt nat64) query;
  get_tokens : () -> (vec record { text; PoolShare }) query;
  pool_lp_tokens : (Pool_Data) -> (vec record { text; nat64 }) query;
  store_pool_data : (Pool_Data, principal) -> ();
  total_lp_tokens : () -> (nat64) query;
}
>>>>>>> f258d51d7126024aee4cc0dfb863a65655031fe0
